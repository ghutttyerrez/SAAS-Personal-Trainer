# ==========================================
# Docker Compose for Development
# ==========================================
version: "3.8"

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: pt-postgres-dev
    environment:
      POSTGRES_DB: personal_trainer_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./apps/api/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./apps/api/src/database/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - pt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: pt-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - pt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # API Service
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: builder
    container_name: pt-api-dev
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/personal_trainer_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_REFRESH_SECRET: dev-refresh-secret-key-change-in-production
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api/src:/app/src
      - ./apps/api/package.json:/app/package.json
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pt-network
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Web Service
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: builder
    container_name: pt-web-dev
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web/src:/app/src
      - ./apps/web/public:/app/public
      - ./apps/web/package.json:/app/package.json
      - /app/node_modules
    depends_on:
      - api
    networks:
      - pt-network
    command: npm start
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pt-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
      - web
    networks:
      - pt-network
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  pt-network:
    driver: bridge
