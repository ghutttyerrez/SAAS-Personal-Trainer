name: Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Create Release
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🏷️ Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: 📝 Generate changelog
        id: changelog
        run: |
          echo "Generating changelog for ${{ steps.version.outputs.version }}..."
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG="Initial release 🎉"
          else
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 📋 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📦 Docker Images
            
            - API: `ghcr.io/${{ github.repository }}-api:${{ steps.version.outputs.version }}`
            - Web: `ghcr.io/${{ github.repository }}-web:${{ steps.version.outputs.version }}`
            
            ## 🔧 Installation
            
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd SAAS-Personal-Trainer
            
            # Checkout this version
            git checkout ${{ steps.version.outputs.version }}
            
            # Install dependencies
            npm install
            
            # Start the application
            npm run dev
            ```
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  # Job 2: Build Release Images
  build-release:
    name: 🐳 Build Release Images
    runs-on: ubuntu-latest
    needs: release
    
    strategy:
      matrix:
        service: [api, web]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
            
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🐳 Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.service }}
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

  # Job 3: Deploy Release
  deploy-release:
    name: 🚀 Deploy Release
    runs-on: ubuntu-latest
    needs: [release, build-release]
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to ${{ github.event.inputs.environment || 'production' }}
        run: |
          echo "🚀 Deploying version ${{ needs.release.outputs.version }} to ${{ github.event.inputs.environment || 'production' }}..."
          
          # Aqui você adicionaria os comandos específicos para seu ambiente
          # Exemplos:
          
          # Para Kubernetes:
          # kubectl set image deployment/api api=ghcr.io/${{ github.repository }}-api:${{ needs.release.outputs.version }}
          # kubectl set image deployment/web web=ghcr.io/${{ github.repository }}-web:${{ needs.release.outputs.version }}
          
          # Para Docker Compose:
          # export API_IMAGE=ghcr.io/${{ github.repository }}-api:${{ needs.release.outputs.version }}
          # export WEB_IMAGE=ghcr.io/${{ github.repository }}-web:${{ needs.release.outputs.version }}
          # docker-compose up -d
          
          # Para cloud providers (AWS, GCP, Azure):
          # aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment
          
          echo "✅ Deployment completed!"
          
      - name: 🧪 Post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          
          # Health check
          # curl -f https://your-api-url.com/health || exit 1
          
          # Smoke tests
          # npm run test:smoke
          
          echo "✅ All tests passed!"
          
      - name: 📢 Notify stakeholders
        uses: actions/github-script@v6
        with:
          script: |
            // Notify via GitHub issue or external webhook
            const deploymentInfo = {
              version: '${{ needs.release.outputs.version }}',
              environment: '${{ github.event.inputs.environment || github.event_name }}',
              timestamp: new Date().toISOString(),
              actor: context.actor,
              workflow_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            };
            
            console.log('Deployment completed:', deploymentInfo);
            
            // Aqui você pode adicionar notificações para:
            // - Slack
            // - Discord  
            // - Email
            // - Teams
            // - Webhooks personalizados

  # Job 4: Update Documentation
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [release, deploy-release]
    if: github.event.inputs.environment == 'production' || github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📚 Update version in docs
        run: |
          echo "📚 Updating documentation with version ${{ needs.release.outputs.version }}..."
          
          # Update README.md with new version
          sed -i "s/Version: v[0-9]\+\.[0-9]\+\.[0-9]\+/Version: ${{ needs.release.outputs.version }}/g" README.md
          
          # Update CHANGELOG.md
          echo "## ${{ needs.release.outputs.version }} - $(date +'%Y-%m-%d')" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "${{ needs.release.outputs.changelog }}" >> temp_changelog.md
          echo "" >> temp_changelog.md
          
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> temp_changelog.md
          fi
          
          mv temp_changelog.md CHANGELOG.md
          
      - name: 💾 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add README.md CHANGELOG.md
            git commit -m "docs: update documentation for ${{ needs.release.outputs.version }}"
            git push
          else
            echo "No documentation changes to commit"
          fi
