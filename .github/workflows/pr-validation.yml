name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: PR Validation
  validate:
    name: 🔍 PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Check for breaking changes
        run: |
          echo "🔍 Checking for breaking changes..."
          git diff --name-only origin/main...HEAD
          
      - name: 📊 Run quick tests
        run: |
          echo "📊 Running quick validation tests..."
          npm run test --workspace @personal-trainer/api -- --passWithNoTests
          
      - name: 🏗️ Test build
        run: |
          echo "🏗️ Testing build process..."
          npm run build --workspace @personal-trainer/api
          npm run build --workspace @personal-trainer/web

  # Job 2: Code Review Bot
  code-review:
    name: 🤖 Automated Code Review
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🤖 Run automated review
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get changed files
            const changedFiles = execSync('git diff --name-only origin/main...HEAD', { encoding: 'utf8' })
              .split('\n')
              .filter(file => file.trim() !== '');
            
            console.log('Changed files:', changedFiles);
            
            // Basic checks
            let issues = [];
            
            changedFiles.forEach(file => {
              if (file.endsWith('.ts') || file.endsWith('.tsx')) {
                // Check for TODO comments
                try {
                  const content = require('fs').readFileSync(file, 'utf8');
                  const todoMatches = content.match(/TODO:|FIXME:|XXX:/gi);
                  if (todoMatches) {
                    issues.push(`⚠️ Found ${todoMatches.length} TODO/FIXME comments in ${file}`);
                  }
                  
                  // Check for console.log
                  const consoleMatches = content.match(/console\.(log|warn|error)/gi);
                  if (consoleMatches) {
                    issues.push(`⚠️ Found ${consoleMatches.length} console statements in ${file}`);
                  }
                } catch (e) {
                  // File might not exist in working directory
                }
              }
            });
            
            // Post review comment
            const reviewComment = `## 🤖 Automated Code Review
            
            **Files changed:** ${changedFiles.length}
            
            ${issues.length > 0 ? 
              '### ⚠️ Issues Found:\n' + issues.map(issue => `- ${issue}`).join('\n') :
              '### ✅ No issues found!'
            }
            
            ### 📝 Review Checklist:
            - [ ] Tests added/updated for new functionality
            - [ ] Documentation updated if needed
            - [ ] No breaking changes without proper migration
            - [ ] Code follows project conventions
            - [ ] Performance considerations addressed
            
            _This is an automated review. Manual review is still required._
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewComment
            });

  # Job 3: Performance Check
  performance:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: ⚡ Bundle size analysis
        run: |
          echo "⚡ Analyzing bundle size..."
          cd apps/web
          npm run build
          
          # Basic bundle size check
          if [ -d "build/static/js" ]; then
            total_size=$(du -sh build/static/js | cut -f1)
            echo "📦 Total JS bundle size: $total_size"
            
            # Check if any single file is too large (>2MB)
            find build/static/js -name "*.js" -size +2M | while read file; do
              size=$(du -sh "$file" | cut -f1)
              echo "⚠️ Large bundle detected: $file ($size)"
            done
          fi
          
      - name: 🚀 API performance test
        run: |
          echo "🚀 Running basic API performance tests..."
          cd apps/api
          npm run build
          
          # Start API in background for testing
          npm start &
          API_PID=$!
          
          # Wait for API to start
          sleep 10
          
          # Basic response time test
          response_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:3001/api/test || echo "0")
          echo "📊 API response time: ${response_time}s"
          
          # Cleanup
          kill $API_PID || true
